#!/usr/bin/bash -e

THRESHOLDS=(0 1 2 5 8 20 50) # 9-19 cause an exception in the jedi function (how can this even happen?)
#THRESHOLDS=(0)
DATAVERSE="JEDIJoinResultDataFetch"
URL="http://localhost:19004/query/service"
USERNAME="admin"
PASSWORD="adminpw"
LIBRARY_NAME="flexiblejoin.jar.zip"
LIBRARY_URL="http://localhost:19005/$USERNAME/udf/$DATAVERSE/$LIBRARY_NAME"
FJ_LIBRARY="/media/Shared/Martin/Documents/Uni/Master_Informatik_Salzburg/22SS/Masterarbeit/asterixdb-benchmarking/lib/$LIBRARY_NAME"
JEDI_PREFIX="jedi"
JEDI_LEN_FILTER_PREFIX="jedi_length_filter"
FJ_INTERVAL_PREFIX="fj_interval"
FJ_LABEL_INTERSECTION_PREFIX="fj_label_intersection"

# return if script is only sourced to get the variables
[[ "${#BASH_SOURCE[@]}" -gt "1" ]] && { return 0; }

if [ "$#" -ne 3 ]; then
    echo "usage: $0 input_file_1 input_file_2 result_file_prefix"
    exit 1
fi

FILE1="$(realpath $1)"
FILE2="$(realpath $2)"
OUTPUT_PREFIX="$3"
OUTPUT_DIR="results/$OUTPUT_PREFIX"

mkdir -p "$OUTPUT_DIR"

# create dataverse and load data;
echo -n "[$(date +"%Y-%m-%dT%H:%M:%SZ")] performing preparation... "
curl -sS --fail-with-body --data pretty=true --data-urlencode "statement=
    DROP DATAVERSE $DATAVERSE IF EXISTS;
    CREATE DATAVERSE $DATAVERSE;
    USE $DATAVERSE;

    CREATE TYPE Type1 AS {
        auto_id: uuid
    };
    CREATE TYPE Type2 AS {
        auto_id: uuid
    };
    CREATE DATASET DS1(Type1) PRIMARY KEY auto_id AUTOGENERATED;
    CREATE DATASET DS2(Type2) PRIMARY KEY auto_id AUTOGENERATED;
    LOAD DATASET DS2 USING localfs((\`path\`=\`localhost://$FILE1\`),(\`format\`=\`adm\`));
    LOAD DATASET DS1 USING localfs((\`path\`=\`localhost://$FILE2\`),(\`format\`=\`adm\`));" \
    $URL > /dev/null
echo "done [$(date +"%Y-%m-%dT%H:%M:%SZ")]"

# upload FJ library
echo -n "[$(date +"%Y-%m-%dT%H:%M:%SZ")] uploading FJ library... "
curl -sS --fail-with-body -u $USERNAME:$PASSWORD -X POST -F 'type=java' -F "data=@$FJ_LIBRARY" $LIBRARY_URL > /dev/null
echo "done [$(date +"%Y-%m-%dT%H:%M:%SZ")]"

# create FJs
echo -n "[$(date +"%Y-%m-%dT%H:%M:%SZ")] creating FJ... "
curl -sS --fail-with-body --data pretty=true --data-urlencode "statement=
    USE $DATAVERSE;

    CREATE JOIN jsonjoin_interval(a, b, threshold: double)
    RETURNS BOOLEAN
    AS \"jsonjoin.lengthfilter.JsonJoin\"
    AT \`$LIBRARY_NAME\`;

    CREATE JOIN jsonjoin_label_intersection(a, b, threshold: double)
    RETURNS BOOLEAN
    AS \"jsonjoin.labelintersection.JsonJoin\"
    AT \`$LIBRARY_NAME\`;

    -- workaround since the detection for overridden functions in QueryTranslator is currently disabled due to a bug when running the DB __not__ through AsterixHyracksIntegrationUtil
    DROP FUNCTION jsonjoin_interval_fj_global_summary_two(a);
    DROP FUNCTION jsonjoin_interval_fj_local_summary_two(a);
    DROP FUNCTION jsonjoin_interval_fj_assign_two(a, b);
    DROP FUNCTION jsonjoin_interval_fj_match(a, b);

    DROP FUNCTION jsonjoin_label_intersection_fj_global_summary_two(a);
    DROP FUNCTION jsonjoin_label_intersection_fj_local_summary_two(a);
    DROP FUNCTION jsonjoin_label_intersection_fj_assign_two(a, b);" \
    $URL > /dev/null
echo "done [$(date +"%Y-%m-%dT%H:%M:%SZ")]"

# acquire data
echo "[$(date +"%Y-%m-%dT%H:%M:%SZ")] acquiring data..."
for thresh in ${THRESHOLDS[@]}; do
    echo -n "[$(date +"%Y-%m-%dT%H:%M:%SZ")]     acquiring jedi data for threshold $thresh... "
    curl -sS --fail-with-body --data pretty=true --data-urlencode "statement=
        USE $DATAVERSE;

        SELECT ds1.auto_id AS id1, ds2.auto_id AS id2
        FROM DS1 ds1, DS2 ds2
        WHERE jedi(ds1, ds2) <= $thresh
        ORDER BY id1, id2;" \
        $URL | jq -r ".results" > "$OUTPUT_DIR/${JEDI_PREFIX}__${OUTPUT_PREFIX}__t$thresh.txt"
    echo "done [$(date +"%Y-%m-%dT%H:%M:%SZ")]"

    echo -n "[$(date +"%Y-%m-%dT%H:%M:%SZ")]     acquiring jedi (length filter) data for threshold $thresh... "
    curl -sS --fail-with-body --data pretty=true --data-urlencode "statement=
        USE $DATAVERSE;

        SELECT ds1.auto_id AS id1, ds2.auto_id AS id2
        FROM DS1 ds1, DS2 ds2
        WHERE jedi(ds1, ds2) <= $thresh
            AND jedi_length_filter(ds1, ds2) <= $thresh
        ORDER BY id1, id2;" \
        $URL | jq -r ".results" > "$OUTPUT_DIR/${JEDI_LEN_FILTER_PREFIX}__${OUTPUT_PREFIX}__t$thresh.txt"
    echo "done [$(date +"%Y-%m-%dT%H:%M:%SZ")]"

    echo -n "[$(date +"%Y-%m-%dT%H:%M:%SZ")]     acquiring FJ interval data for threshold $thresh... "
    curl -sS --fail-with-body --data pretty=true --data-urlencode "statement=
        USE $DATAVERSE;

        SELECT ds1.auto_id AS id1, ds2.auto_id AS id2
        FROM DS1 ds1, DS2 ds2
        WHERE jsonjoin_interval(ds1, ds2, $thresh)
        ORDER BY id1, id2;" \
        $URL | jq -r ".results" > "$OUTPUT_DIR/${FJ_INTERVAL_PREFIX}__${OUTPUT_PREFIX}__t$thresh.txt"
    echo "done [$(date +"%Y-%m-%dT%H:%M:%SZ")]"

    echo -n "[$(date +"%Y-%m-%dT%H:%M:%SZ")]     acquiring FJ label intersection data for threshold $thresh... "
    curl -sS --fail-with-body --data pretty=true --data-urlencode "statement=
        USE $DATAVERSE;

        SELECT ds1.auto_id AS id1, ds2.auto_id AS id2
        FROM DS1 ds1, DS2 ds2
        WHERE jsonjoin_label_intersection(ds1, ds2, $thresh)
        ORDER BY id1, id2;" \
        $URL | jq -r ".results" > "$OUTPUT_DIR/${FJ_LABEL_INTERSECTION_PREFIX}__${OUTPUT_PREFIX}__t$thresh.txt"
    echo "done [$(date +"%Y-%m-%dT%H:%M:%SZ")]"
done
echo "[$(date +"%Y-%m-%dT%H:%M:%SZ")] done"

# cleanup
echo -n "[$(date +"%Y-%m-%dT%H:%M:%SZ")] performing cleanup... "
curl -sS --fail-with-body --data pretty=true --data-urlencode "statement=DROP DATAVERSE $DATAVERSE;" $URL > /dev/null
echo "done [$(date +"%Y-%m-%dT%H:%M:%SZ")]"
